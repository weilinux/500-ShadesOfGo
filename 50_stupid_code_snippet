#1 左大括号 { 一般不能单独放一行
#2 未使用的变量
#3 未使用的 import
#4 简短声明的变量只能在函数内部使用 := used in func
#5 不能使用简短声明来设置字段的值
#6 不小心覆盖了变量  go tool vet -shadow main.go
#7 显式类型的变量无法使用 nil 来初始化
#8 直接使用值为 nil 的 slice、map
#9 map 容量;在创建 map 类型的变量时可以指定容量，但不能像 slice 一样使用 cap() 来检测分配空间的大小
#10 Array 类型的值作为函数参数(cannot change array, should by pointer)
#11 字符串的长度;Go 的内建函数 len() 返回的是字符串的 byte 数量
#12 log.Fatal 和 log.Panic 不只是 log; // 输出信息后，程序终止执行

#13 对内建数据结构的操作并不是同步的;尽管 Go 本身有大量的特性来支持并发，但并不保证并发的数据安全，用户需自己保证变量等数据以原子操作更新
#13 goroutine 和 channel 是进行原子操作的好方法，或使用 "sync" 包中的锁

#14 switch 中的 fallthrough 语句;switch 语句中的 case 代码块会默认带上 break，但可以使用 fallthrough 来强制执行下一个 case 代码块。
#15  不导出的 struct 字段无法被 encode; struct 在进行 json、xml、gob 等格式的 encode 操作时，这些私有字段会被忽略，导出时得到零值
#16 程序退出时还有 goroutine 在执行;程序默认不等所有 goroutine 都执行完才退出，这点需要特别注意
#17 struct、array、slice 和 map 的值比较; 使用相等运算符 == 来比较结构体变量，前提是两个结构体的成员都是可比较的类型
#18 go提供了一些库函数来比较那些无法使用 == 比较的变量，比如使用 "reflect" 包的 DeepEqual()
#19 从 panic 中恢复; 在一个 defer 延迟执行的函数中调用 recover() ，它便能捕捉 / 中断 panic
#20 从一个现有的非 interface 类型创建新类型时，并不会继承原有的方法

#21 堆栈变量; 在 Go 中即使使用 new()、make() 来创建变量，变量为内存分配位置依旧归 Go 编译器管
#21 go build 或 go run 时，加入 -m 参数，能准确分析程序的变量分配位置.
